version: 2.1

# Define parameters that can be passed to the pipeline
parameters:
  code_content:
    type: string
    default: ""
  test_content:
    type: string
    default: ""
  code_filename:
    type: string
    default: "python_sample.py"
  test_filename:
    type: string
    default: "input_file.py"

jobs:
  test:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install pytest requests
      - run:
          name: Create uploaded files
          command: |
            # Set default values if parameters are not provided
            CODE_FILENAME=${CODE_FILENAME:-"python_sample.py"}
            TEST_FILENAME=${TEST_FILENAME:-"input_file.py"}
            
            echo "📋 Using filenames: CODE_FILENAME=$CODE_FILENAME, TEST_FILENAME=$TEST_FILENAME"
            
            # Create the code file from pipeline parameters
            if [ -n "$CODE_CONTENT" ]; then
              echo "$CODE_CONTENT" | base64 -d > "$CODE_FILENAME"
              echo "✅ Created code file: $CODE_FILENAME"
              echo "📄 Code file contents:"
              cat "$CODE_FILENAME"
            else
              echo "⚠️ No CODE_CONTENT provided - cannot create code file"
              echo "❌ Pipeline will fail - code content is required"
              exit 1
            fi
            
            echo ""
            
            # Create the test file from pipeline parameters  
            if [ -n "$TEST_CONTENT" ]; then
              echo "$TEST_CONTENT" | base64 -d > "$TEST_FILENAME"
              echo "✅ Created test file: $TEST_FILENAME"
              echo "📄 Test file contents:"
              cat "$TEST_FILENAME"
            else
              echo "⚠️ No TEST_CONTENT provided - creating basic test file"
              # Create a basic test file that imports the code
              cat > "$TEST_FILENAME" << EOF
import pytest
import sys
import os

# Add the current directory to Python path
sys.path.insert(0, os.getcwd())

# Import the code file (without .py extension)
code_module = "$CODE_FILENAME".replace('.py', '')
try:
    exec(f"import {code_module}")
    print(f"✅ Successfully imported {code_module}")
except Exception as e:
    print(f"⚠️ Could not import {code_module}: {e}")

def test_basic():
    """Basic test to verify the code can be imported and executed"""
    assert True
    print("✅ Basic test passed")

def test_code_import():
    """Test that the code file can be imported"""
    try:
        exec(f"import {code_module}")
        assert True
    except Exception as e:
        assert False, f"Failed to import {code_module}: {e}"
EOF
              echo "✅ Created basic test file: $TEST_FILENAME"
              echo "📄 Test file contents:"
              cat "$TEST_FILENAME"
            fi
            
            echo ""
            echo "🔍 Files created in current directory:"
            ls -la *.py
            
            # Export variables for next steps
            echo "CODE_FILENAME=$CODE_FILENAME" >> $BASH_ENV
            echo "TEST_FILENAME=$TEST_FILENAME" >> $BASH_ENV
      - run:
          name: Run tests
          command: |
            echo "🧪 Running tests on: $TEST_FILENAME"
            echo "📄 Using code file: $CODE_FILENAME"
            echo ""
            echo "🔍 Available test files:"
            ls -la *.py
            echo ""
            python -m pytest "$TEST_FILENAME" -v --tb=short
      - run:
          name: Dynamic Test Summary
          command: |
            echo "📊 Generating test summary..."
            echo "🔍 Using test file: $TEST_FILENAME"
            python run_dynamic_tests.py

workflows:
  version: 2
  main:
    jobs:
      - test
