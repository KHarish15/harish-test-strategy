version: 2.1

# Define parameters that can be passed to the pipeline
parameters:
  code_content:
    type: string
    default: ""
  test_content:
    type: string
    default: ""
  code_filename:
    type: string
    default: "python_sample.py"
  test_filename:
    type: string
    default: "input_file.py"

jobs:
  test:
    docker:
      - image: cimg/python:3.10
    environment:
      CODE_CONTENT: << pipeline.parameters.code_content >>
      TEST_CONTENT: << pipeline.parameters.test_content >>
      CODE_FILENAME: << pipeline.parameters.code_filename >>
      TEST_FILENAME: << pipeline.parameters.test_filename >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install pytest requests
      - run:
          name: Setup test environment
          command: |
            # Copy run_dynamic_tests.py if it exists in the repository
            if [ -f "run_dynamic_tests.py" ]; then
              echo "✅ Found run_dynamic_tests.py"
            else
              echo "⚠️ run_dynamic_tests.py not found - creating basic version"
              echo 'import subprocess' > run_dynamic_tests.py
              echo 'import re' >> run_dynamic_tests.py
              echo 'import sys' >> run_dynamic_tests.py
              echo 'import os' >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo 'def run_pytest_and_parse():' >> run_dynamic_tests.py
              echo '    test_filename = os.getenv("TEST_FILENAME", "input_file.py")' >> run_dynamic_tests.py
              echo "    print(f\"🔍 Looking for tests in: {test_filename}\")" >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo '    result = subprocess.run(' >> run_dynamic_tests.py
              echo '        ["pytest", test_filename, "--tb=short", "-q"],' >> run_dynamic_tests.py
              echo '        stdout=subprocess.PIPE,' >> run_dynamic_tests.py
              echo '        stderr=subprocess.STDOUT,' >> run_dynamic_tests.py
              echo '        text=True' >> run_dynamic_tests.py
              echo '    )' >> run_dynamic_tests.py
              echo '    output = result.stdout' >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo '    passed = failed = 0' >> run_dynamic_tests.py
              echo '    summary_match = re.search(r"(\d+) passed", output)' >> run_dynamic_tests.py
              echo '    if summary_match:' >> run_dynamic_tests.py
              echo '        passed = int(summary_match.group(1))' >> run_dynamic_tests.py
              echo '    failed_match = re.search(r"(\d+) failed", output)' >> run_dynamic_tests.py
              echo '    if failed_match:' >> run_dynamic_tests.py
              echo '        failed = int(failed_match.group(1))' >> run_dynamic_tests.py
              echo '    total = passed + failed' >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo "    print(f\"No of test cases: {total}\")" >> run_dynamic_tests.py
              echo "    print(f\"No of test cases passed: {passed}\")" >> run_dynamic_tests.py
              echo "    print(f\"No of test cases failed: {failed}\")" >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo 'if __name__ == "__main__":' >> run_dynamic_tests.py
              echo '    run_pytest_and_parse()' >> run_dynamic_tests.py
            fi
      - run:
          name: Create uploaded files
          command: |
            # Set default values if parameters are not provided
            CODE_FILENAME=${CODE_FILENAME:-"python_sample.py"}
            TEST_FILENAME=${TEST_FILENAME:-"input_file.py"}
            
            # Clean filenames - remove spaces and ensure proper .py extension
            CODE_FILENAME=$(echo "$CODE_FILENAME" | sed 's/ /_/g' | sed 's/\.py\.py$/.py/')
            TEST_FILENAME=$(echo "$TEST_FILENAME" | sed 's/ /_/g' | sed 's/\.py\.py$/.py/')
            
            # Ensure .py extension
            if [[ ! "$CODE_FILENAME" =~ \.py$ ]]; then
              CODE_FILENAME="${CODE_FILENAME}.py"
            fi
            if [[ ! "$TEST_FILENAME" =~ \.py$ ]]; then
              TEST_FILENAME="${TEST_FILENAME}.py"
            fi
            
            echo "📋 Using filenames: CODE_FILENAME=$CODE_FILENAME, TEST_FILENAME=$TEST_FILENAME"
            echo "🔍 Debug: CODE_CONTENT length: ${#CODE_CONTENT}"
            echo "🔍 Debug: TEST_CONTENT length: ${#TEST_CONTENT}"
            echo "🔍 Debug: Original CODE_FILENAME from env: ${CODE_FILENAME}"
            echo "🔍 Debug: Original TEST_FILENAME from env: ${TEST_FILENAME}"
            
            # Create the code file from pipeline parameters
            if [ -n "$CODE_CONTENT" ]; then
              echo "🔍 Attempting to decode CODE_CONTENT..."
              if echo "$CODE_CONTENT" | base64 -d > "$CODE_FILENAME" 2>/dev/null; then
              echo "✅ Created code file: $CODE_FILENAME"
              echo "📄 Code file contents:"
              cat "$CODE_FILENAME"
              else
                echo "❌ Failed to decode CODE_CONTENT - invalid base64"
                echo "🔍 CODE_CONTENT preview: ${CODE_CONTENT:0:50}..."
                exit 1
              fi
            else
              echo "⚠️ No CODE_CONTENT provided - cannot create code file"
              echo "❌ Pipeline will fail - code content is required"
              exit 1
            fi
            
            echo ""
            
            # Create the test file from pipeline parameters  
            if [ -n "$TEST_CONTENT" ]; then
              echo "🔍 Attempting to decode TEST_CONTENT..."
              if echo "$TEST_CONTENT" | base64 -d > "$TEST_FILENAME" 2>/dev/null; then
                echo "✅ Created test file from provided content: $TEST_FILENAME"
                echo "📄 Test file contents:"
                cat "$TEST_FILENAME"
                echo ""
                echo "🔍 Using your actual test file content (not generated)"
                echo "🔍 Your test file will be used as-is with proper indentation"
                echo "🔍 Note: Your test file should import functions from the code file"
                echo "🔍 If your test uses 'from main import ...', it will be updated automatically"
                
                # Update import statement to match the actual code filename
                echo "🔍 Updating import statement to match code filename..."
                code_module_name=$(echo "$CODE_FILENAME" | sed 's/\.py$//' | sed 's/ /_/g')
                sed -i "s/from main import/from $code_module_name import/g" "$TEST_FILENAME"
                echo "🔍 Updated imports to use: $code_module_name"
                echo "📄 Updated test file contents:"
                cat "$TEST_FILENAME"
              else
                echo "❌ Failed to decode TEST_CONTENT - invalid base64"
                echo "🔍 TEST_CONTENT preview: ${TEST_CONTENT:0:50}..."
                echo "⚠️ Falling back to generated test file"
                # Continue to the else block to generate a test file
              fi
            fi
            
            # Only generate test file if TEST_CONTENT was not provided or failed to decode
            if [ ! -f "$TEST_FILENAME" ] || [ -z "$TEST_CONTENT" ]; then
              echo "⚠️ No valid TEST_CONTENT provided - creating basic test file"
              # Create a basic test file that imports the code
              echo 'import pytest' > "$TEST_FILENAME"
              echo 'import sys' >> "$TEST_FILENAME"
              echo 'import os' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '# Add the current directory to Python path' >> "$TEST_FILENAME"
              echo 'sys.path.insert(0, os.getcwd())' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '# Import the code file dynamically' >> "$TEST_FILENAME"
              echo 'import importlib.util' >> "$TEST_FILENAME"
              echo 'import os' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo 'try:' >> "$TEST_FILENAME"
              echo '    # Method 1: Try direct import if module name is valid' >> "$TEST_FILENAME"
              echo "    code_module = \"$CODE_FILENAME\".replace(\".py\", \"\").replace(\" \", \"_\")" >> "$TEST_FILENAME"
              echo "    exec(f\"import {code_module}\")" >> "$TEST_FILENAME"
              echo "    print(f\"✅ Successfully imported {code_module}\")" >> "$TEST_FILENAME"
              echo 'except ImportError as e:' >> "$TEST_FILENAME"
              echo "    print(f\"❌ Direct import failed: {e}\")" >> "$TEST_FILENAME"
              echo '    try:' >> "$TEST_FILENAME"
              echo '        # Method 2: Use importlib to load the file directly' >> "$TEST_FILENAME"
              echo '        spec = importlib.util.spec_from_file_location("dynamic_module", "$CODE_FILENAME")' >> "$TEST_FILENAME"
              echo '        module = importlib.util.module_from_spec(spec)' >> "$TEST_FILENAME"
              echo '        spec.loader.exec_module(module)' >> "$TEST_FILENAME"
              echo '        print("✅ Successfully imported using importlib")' >> "$TEST_FILENAME"
              echo '        # Make functions available for testing' >> "$TEST_FILENAME"
              echo '        globals().update({name: getattr(module, name) for name in dir(module) if not name.startswith("_")})' >> "$TEST_FILENAME"
              echo '    except Exception as e2:' >> "$TEST_FILENAME"
              echo "        print(f\"❌ Importlib failed: {e2}\")" >> "$TEST_FILENAME"
              echo '        print("📁 Available files:")' >> "$TEST_FILENAME"
              echo '        for file in os.listdir("."):' >> "$TEST_FILENAME"
              echo '            if file.endswith(".py"):' >> "$TEST_FILENAME"
              echo "                print(f\"  - {file}\")" >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo 'def test_basic():' >> "$TEST_FILENAME"
              echo '    """Basic test to verify the code can be imported and executed"""' >> "$TEST_FILENAME"
              echo '    assert True' >> "$TEST_FILENAME"
              echo '    print("✅ Basic test passed")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo 'def test_code_import():' >> "$TEST_FILENAME"
              echo '    """Test that the code file can be imported and functions are available"""' >> "$TEST_FILENAME"
              echo '    try:' >> "$TEST_FILENAME"
              echo '        # Check if functions are available in globals' >> "$TEST_FILENAME"
              echo '        available_functions = [name for name in globals() if not name.startswith("_") and callable(globals()[name])]' >> "$TEST_FILENAME"
              echo "        print(f\"Available functions: {available_functions}\")" >> "$TEST_FILENAME"
              echo '        assert len(available_functions) > 0, "No functions found in imported module"' >> "$TEST_FILENAME"
              echo '        return True' >> "$TEST_FILENAME"
              echo '    except Exception as e:' >> "$TEST_FILENAME"
              echo "        print(f\"❌ Import test failed: {e}\")" >> "$TEST_FILENAME"
              echo '        return False' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo 'def test_sample_functions():' >> "$TEST_FILENAME"
              echo '    """Test the functions from the sample code"""' >> "$TEST_FILENAME"
              echo '    try:' >> "$TEST_FILENAME"
              echo '        # Test add function' >> "$TEST_FILENAME"
              echo '        if "add" in globals():' >> "$TEST_FILENAME"
              echo '            assert add(2, 3) == 5' >> "$TEST_FILENAME"
              echo '            assert add(-1, 1) == 0' >> "$TEST_FILENAME"
              echo '            print("✅ add function works correctly")' >> "$TEST_FILENAME"
              echo '        else:' >> "$TEST_FILENAME"
              echo '            print("⚠️ add function not found")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '        # Test subtract function' >> "$TEST_FILENAME"
              echo '        if "subtract" in globals():' >> "$TEST_FILENAME"
              echo '            assert subtract(10, 5) == 5' >> "$TEST_FILENAME"
              echo '            assert subtract(5, 10) == -5' >> "$TEST_FILENAME"
              echo '            print("✅ subtract function works correctly")' >> "$TEST_FILENAME"
              echo '        else:' >> "$TEST_FILENAME"
              echo '            print("⚠️ subtract function not found")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '        # Test multiply function' >> "$TEST_FILENAME"
              echo '        if "multiply" in globals():' >> "$TEST_FILENAME"
              echo '            assert multiply(3, 4) == 12' >> "$TEST_FILENAME"
              echo '            assert multiply(0, 100) == 0' >> "$TEST_FILENAME"
              echo '            print("✅ multiply function works correctly")' >> "$TEST_FILENAME"
              echo '        else:' >> "$TEST_FILENAME"
              echo '            print("⚠️ multiply function not found")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '        # Test divide function with error handling' >> "$TEST_FILENAME"
              echo '        if "divide" in globals():' >> "$TEST_FILENAME"
              echo '            assert divide(10, 2) == 5' >> "$TEST_FILENAME"
              echo '            try:' >> "$TEST_FILENAME"
              echo '                divide(5, 0)' >> "$TEST_FILENAME"
              echo '                assert False, "Should have raised ValueError"' >> "$TEST_FILENAME"
              echo '            except ValueError:' >> "$TEST_FILENAME"
              echo '                print("✅ divide function correctly raises ValueError for division by zero")' >> "$TEST_FILENAME"
              echo '        else:' >> "$TEST_FILENAME"
              echo '            print("⚠️ divide function not found")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '        # Test is_even function' >> "$TEST_FILENAME"
              echo '        if "is_even" in globals():' >> "$TEST_FILENAME"
              echo '            assert is_even(2) == True' >> "$TEST_FILENAME"
              echo '            assert is_even(3) == False' >> "$TEST_FILENAME"
              echo '            print("✅ is_even function works correctly")' >> "$TEST_FILENAME"
              echo '        else:' >> "$TEST_FILENAME"
              echo '            print("⚠️ is_even function not found")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '        # Test get_max function' >> "$TEST_FILENAME"
              echo '        if "get_max" in globals():' >> "$TEST_FILENAME"
              echo '            assert get_max([1, 2, 3, 4, 5]) == 5' >> "$TEST_FILENAME"
              echo '            assert get_max([-1, -2, -3]) == -1' >> "$TEST_FILENAME"
              echo '            try:' >> "$TEST_FILENAME"
              echo '                get_max([])' >> "$TEST_FILENAME"
              echo '                assert False, "Should have raised ValueError"' >> "$TEST_FILENAME"
              echo '            except ValueError:' >> "$TEST_FILENAME"
              echo '                print("✅ get_max function correctly raises ValueError for empty list")' >> "$TEST_FILENAME"
              echo '        else:' >> "$TEST_FILENAME"
              echo '            print("⚠️ get_max function not found")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '        print("✅ All available functions tested successfully")' >> "$TEST_FILENAME"
              echo '        return True' >> "$TEST_FILENAME"
              echo '    except Exception as e:' >> "$TEST_FILENAME"
              echo "        print(f\"❌ Function test failed: {e}\")" >> "$TEST_FILENAME"
              echo '        return False' >> "$TEST_FILENAME"
              echo "✅ Created basic test file: $TEST_FILENAME"
              echo "📄 Test file contents:"
              cat "$TEST_FILENAME"
            fi
            
            echo ""
            echo "🔍 Files created in current directory:"
            ls -la *.py
            
            # Validate that files were created
            if [ ! -f "$CODE_FILENAME" ]; then
              echo "❌ Code file $CODE_FILENAME was not created"
              exit 1
            fi
            
            if [ ! -f "$TEST_FILENAME" ]; then
              echo "❌ Test file $TEST_FILENAME was not created"
              exit 1
            fi
            
            echo "✅ All files created successfully"
            
            # Export variables for next steps
            echo "export CODE_FILENAME=\"$CODE_FILENAME\"" >> $BASH_ENV
            echo "export TEST_FILENAME=\"$TEST_FILENAME\"" >> $BASH_ENV
      - run:
          name: Run tests
          command: |
            echo "🧪 Running tests on: $TEST_FILENAME"
            echo "📄 Using code file: $CODE_FILENAME"
            echo ""
            echo "🔍 Available test files:"
            ls -la *.py
            echo ""
            python -m pytest "$TEST_FILENAME" -v --tb=short --import-mode=importlib
      - run:
          name: Dynamic Test Summary
          command: |
            echo "📊 Generating test summary..."
            echo "🔍 Using test file: $TEST_FILENAME"
            python run_dynamic_tests.py

workflows:
  version: 2
  main:
    jobs:
      - test:
          filters:
            branches:
              only: main
