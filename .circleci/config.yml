version: 2.1

# Define parameters that can be passed to the pipeline
parameters:
  code_content:
    type: string
    default: ""
  test_content:
    type: string
    default: ""
  code_filename:
    type: string
    default: "python_sample.py"
  test_filename:
    type: string
    default: "input_file.py"

jobs:
  test:
    docker:
      - image: cimg/python:3.10
    environment:
      CODE_CONTENT: << pipeline.parameters.code_content >>
      TEST_CONTENT: << pipeline.parameters.test_content >>
      CODE_FILENAME: << pipeline.parameters.code_filename >>
      TEST_FILENAME: << pipeline.parameters.test_filename >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            pip install pytest requests
      - run:
          name: Setup test environment
          command: |
            # Copy run_dynamic_tests.py if it exists in the repository
            if [ -f "run_dynamic_tests.py" ]; then
              echo "✅ Found run_dynamic_tests.py"
            else
              echo "⚠️ run_dynamic_tests.py not found - creating basic version"
              echo 'import subprocess' > run_dynamic_tests.py
              echo 'import re' >> run_dynamic_tests.py
              echo 'import sys' >> run_dynamic_tests.py
              echo 'import os' >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo 'def run_pytest_and_parse():' >> run_dynamic_tests.py
              echo '    test_filename = os.getenv("TEST_FILENAME", "input_file.py")' >> run_dynamic_tests.py
              echo "    print(f\"🔍 Looking for tests in: {test_filename}\")" >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo '    result = subprocess.run(' >> run_dynamic_tests.py
              echo '        ["pytest", test_filename, "--tb=short", "-q"],' >> run_dynamic_tests.py
              echo '        stdout=subprocess.PIPE,' >> run_dynamic_tests.py
              echo '        stderr=subprocess.STDOUT,' >> run_dynamic_tests.py
              echo '        text=True' >> run_dynamic_tests.py
              echo '    )' >> run_dynamic_tests.py
              echo '    output = result.stdout' >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo '    passed = failed = 0' >> run_dynamic_tests.py
              echo '    summary_match = re.search(r"(\d+) passed", output)' >> run_dynamic_tests.py
              echo '    if summary_match:' >> run_dynamic_tests.py
              echo '        passed = int(summary_match.group(1))' >> run_dynamic_tests.py
              echo '    failed_match = re.search(r"(\d+) failed", output)' >> run_dynamic_tests.py
              echo '    if failed_match:' >> run_dynamic_tests.py
              echo '        failed = int(failed_match.group(1))' >> run_dynamic_tests.py
              echo '    total = passed + failed' >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo "    print(f\"No of test cases: {total}\")" >> run_dynamic_tests.py
              echo "    print(f\"No of test cases passed: {passed}\")" >> run_dynamic_tests.py
              echo "    print(f\"No of test cases failed: {failed}\")" >> run_dynamic_tests.py
              echo '' >> run_dynamic_tests.py
              echo 'if __name__ == "__main__":' >> run_dynamic_tests.py
              echo '    run_pytest_and_parse()' >> run_dynamic_tests.py
            fi
      - run:
          name: Create uploaded files
          command: |
            # Set default values if parameters are not provided
            CODE_FILENAME=${CODE_FILENAME:-"python_sample.py"}
            TEST_FILENAME=${TEST_FILENAME:-"input_file.py"}
            
            echo "📋 Using filenames: CODE_FILENAME=$CODE_FILENAME, TEST_FILENAME=$TEST_FILENAME"
            echo "🔍 Debug: CODE_CONTENT length: ${#CODE_CONTENT}"
            echo "🔍 Debug: TEST_CONTENT length: ${#TEST_CONTENT}"
            
            # Create the code file from pipeline parameters
            if [ -n "$CODE_CONTENT" ]; then
              echo "🔍 Attempting to decode CODE_CONTENT..."
              if echo "$CODE_CONTENT" | base64 -d > "$CODE_FILENAME" 2>/dev/null; then
                echo "✅ Created code file: $CODE_FILENAME"
                echo "📄 Code file contents:"
                cat "$CODE_FILENAME"
              else
                echo "❌ Failed to decode CODE_CONTENT - invalid base64"
                echo "🔍 CODE_CONTENT preview: ${CODE_CONTENT:0:50}..."
                exit 1
              fi
            else
              echo "⚠️ No CODE_CONTENT provided - cannot create code file"
              echo "❌ Pipeline will fail - code content is required"
              exit 1
            fi
            
            echo ""
            
            # Create the test file from pipeline parameters  
            if [ -n "$TEST_CONTENT" ]; then
              echo "🔍 Attempting to decode TEST_CONTENT..."
              if echo "$TEST_CONTENT" | base64 -d > "$TEST_FILENAME" 2>/dev/null; then
                echo "✅ Created test file: $TEST_FILENAME"
                echo "📄 Test file contents:"
                cat "$TEST_FILENAME"
              else
                echo "❌ Failed to decode TEST_CONTENT - invalid base64"
                echo "🔍 TEST_CONTENT preview: ${TEST_CONTENT:0:50}..."
                exit 1
              fi
            else
              echo "⚠️ No TEST_CONTENT provided - creating basic test file"
              # Create a basic test file that imports the code
              echo 'import pytest' > "$TEST_FILENAME"
              echo 'import sys' >> "$TEST_FILENAME"
              echo 'import os' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '# Add the current directory to Python path' >> "$TEST_FILENAME"
              echo 'sys.path.insert(0, os.getcwd())' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo '# Import the code file (without .py extension)' >> "$TEST_FILENAME"
              echo 'code_module = "$CODE_FILENAME".replace(".py", "")' >> "$TEST_FILENAME"
              echo 'try:' >> "$TEST_FILENAME"
              echo "    exec(f\"import {code_module}\")" >> "$TEST_FILENAME"
              echo "    print(f\"✅ Successfully imported {code_module}\")" >> "$TEST_FILENAME"
              echo 'except Exception as e:' >> "$TEST_FILENAME"
              echo "    print(f\"⚠️ Could not import {code_module}: {e}\")" >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo 'def test_basic():' >> "$TEST_FILENAME"
              echo '    """Basic test to verify the code can be imported and executed"""' >> "$TEST_FILENAME"
              echo '    assert True' >> "$TEST_FILENAME"
              echo '    print("✅ Basic test passed")' >> "$TEST_FILENAME"
              echo '' >> "$TEST_FILENAME"
              echo 'def test_code_import():' >> "$TEST_FILENAME"
              echo '    """Test that the code file can be imported"""' >> "$TEST_FILENAME"
              echo '    try:' >> "$TEST_FILENAME"
              echo "        exec(f\"import {code_module}\")" >> "$TEST_FILENAME"
              echo '        assert True' >> "$TEST_FILENAME"
              echo '    except Exception as e:' >> "$TEST_FILENAME"
              echo "        assert False, f\"Failed to import {code_module}: {e}\"" >> "$TEST_FILENAME"
              echo "✅ Created basic test file: $TEST_FILENAME"
              echo "📄 Test file contents:"
              cat "$TEST_FILENAME"
            fi
            
            echo ""
            echo "🔍 Files created in current directory:"
            ls -la *.py
            
            # Validate that files were created
            if [ ! -f "$CODE_FILENAME" ]; then
              echo "❌ Code file $CODE_FILENAME was not created"
              exit 1
            fi
            
            if [ ! -f "$TEST_FILENAME" ]; then
              echo "❌ Test file $TEST_FILENAME was not created"
              exit 1
            fi
            
            echo "✅ All files created successfully"
            
            # Export variables for next steps
            echo "CODE_FILENAME=$CODE_FILENAME" >> $BASH_ENV
            echo "TEST_FILENAME=$TEST_FILENAME" >> $BASH_ENV
      - run:
          name: Run tests
          command: |
            echo "🧪 Running tests on: $TEST_FILENAME"
            echo "📄 Using code file: $CODE_FILENAME"
            echo ""
            echo "🔍 Available test files:"
            ls -la *.py
            echo ""
            python -m pytest "$TEST_FILENAME" -v --tb=short
      - run:
          name: Dynamic Test Summary
          command: |
            echo "📊 Generating test summary..."
            echo "🔍 Using test file: $TEST_FILENAME"
            python run_dynamic_tests.py

workflows:
  version: 2
  main:
    jobs:
      - test:
          filters:
            branches:
              only: main
